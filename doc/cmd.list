# CommandStubs.pl
&addCmdHook("extra", 'd?bugs', ('CODEREF' => 'DBugs::Parse',
&addCmdHook("extra", 'dauthor', ('CODEREF' => 'Debian::searchAuthor',
&addCmdHook("extra", '(d|search)desc', ('CODEREF' => 'Debian::searchDescFE',
&addCmdHook("extra", 'dnew', ('CODEREF' => 'DebianNew',
&addCmdHook("extra", 'dincoming', ('CODEREF' => 'Debian::generateIncoming',
&addCmdHook("extra", 'dstats', ('CODEREF' => 'Debian::infoStats',
&addCmdHook("extra", 'd?contents', ('CODEREF' => 'Debian::searchContents',
&addCmdHook("extra", 'd?find', ('CODEREF' => 'Debian::DebianFind',
&addCmdHook("extra", 'insult', ('CODEREF' => 'Insult::Insult',
&addCmdHook("extra", 'kernel', ('CODEREF' => 'Kernel::Kernel',
&addCmdHook("extra", 'listauth', ('CODEREF' => 'CmdListAuth',
&addCmdHook("extra", 'quote', ('CODEREF' => 'Quote::Quote',
&addCmdHook("extra", 'countdown', ('CODEREF' => 'countdown',
&addCmdHook("extra", 'lart', ('CODEREF' => 'lart',
&addCmdHook("extra", 'convert', ('CODEREF' => 'convert',
&addCmdHook("extra", '(cookie|random)', ('CODEREF' => 'cookie',
&addCmdHook("extra", 'u(ser)?info', ('CODEREF' => 'userinfo',
&addCmdHook("extra", 'rootWarn', ('CODEREF' => 'CmdrootWarn',
&addCmdHook("extra", 'seen', ('CODEREF' => 'seen', 'Identifier' =>
&addCmdHook("extra", 'dict', ('CODEREF' => 'Dict::Dict',
&addCmdHook("extra", 'slashdot', ('CODEREF' => 'Slashdot::Slashdot',
&addCmdHook("extra", 'uptime', ('CODEREF' => 'uptime', 'Identifier' => 'uptime',
&addCmdHook("extra", 'nullski', ('CODEREF' => 'nullski', ) );
&addCmdHook("extra", '(fm|freshmeat)', ('CODEREF' => 'Freshmeat::Freshmeat',
&addCmdHook("extra", 'verstats', ('CODEREF' => 'do_verstats' ) );
    if ($message =~ m{
    if ($message =~ /^($debiancmd)(\s+(.*))?$/i) {
    if ($message =~ /^(?:search\s+)?(\S+)\s+for\s+['"]?(.*?)["']?\s*\?*$/i) {
	if ($message =~ /^_stats(\s+(\S+))$/i) {
	if ($message =~ /^($z)stats(\s+(\S+))?$/i) {
    if ($message =~ /^list(\S+)(\s+(.*))?$/i) {
    if ($message =~ /^(?:lame|nick)ometer(?: for)? (\S+)/i) {
    if ($message =~ /^topic(\s+(.*))?$/i) {
    if ($message =~ /^wingate$/i) {
# Process.pl
    if ($message =~ /^join(\s+(.*))?\s*$/i) {
    if ($msgType =~ /private/ and $message =~ s/^identify//i) {
	$message =~ s/^\s+|\s+$//g;
    if ($msgType =~ /private/ and $message =~ s/^pass//i) {
	$message =~ s/^\s+|\s+$//g;
    if ($msgType =~ /public/ and $message =~ s/^\+//) {
	next unless ($message =~ /^\Q$y\E\s*/);
    if ($message =~ /how (the hell )?are (ya|you)( doin\'?g?)?\?*$/) {
    if ($message =~ /you (rock|rewl|rule|are so+ coo+l)/ ||
	$message =~ /(good (bo(t|y)|g([ui]|r+)rl))|(bot( |\-)?snack)/i)
    if ($message =~ /^than(ks?|x)( you)?( \S+)?/i) {
	return 'thank: no addr' unless ($message =~ /$ident/ or $talkok);
    if ($message =~ /^(\S+)(--|\+\+)\s*$/ and $addressed) {
# UserExtra.pl
    if ($message =~ /^(asci*|chr) (\d+)$/) {
    if ($message =~ /^ord(\s+(.*))$/) {
    if ($message =~ /^hex(\s+(.*))?$/i) {
    if ($message =~ /^crypt(\s+(.*))?$/i) {
    if ($message =~ /^(cycle)(\s+(\S+))?$/i) {
    if ($message =~ /^redir(\s+(.*))?/i) {
    if ($message =~ /^rot13(\s+(.*))?/i) {
    if ($message =~ /^cpustats$/i) {
    if ($message =~ /^ircstats?$/i) {
    if ($message =~ /^statu?s$/i) {
    if ($message =~ /^wantNick$/i) {
&addCmdHook("main", 'chan(stats|info)', ('CODEREF' => 'chaninfo', ) );
&addCmdHook("main", 'cmd(stats|info)', ('CODEREF' => 'cmdstats', ) );
&addCmdHook("main", 'factinfo', ('CODEREF' => 'factinfo',
&addCmdHook("main", 'factstats?', ('CODEREF' => 'factstats',
&addCmdHook("main", 'help', ('CODEREF' => 'help',
&addCmdHook("main", 'karma', ('CODEREF' => 'karma', ) );
&addCmdHook("main", 'i?spell', ('CODEREF' => 'ispell',
&addCmdHook("main", 'd?nslookup', ('CODEREF' => 'DNS',
&addCmdHook("main", 'tell|explain', ('CODEREF' => 'tell',
&addCmdHook("main", 'news', ('CODEREF' => 'News::Parse',
&addCmdHook("main", 'countrystats', ('CODEREF' => 'countryStats',
# Modules/UserDCC.pl
    if ($message =~ /^(exit|quit)$/i) {
    if ($message =~ /^who$/) {
    if ($message =~ /^tellme(\s+(.*))?$/i) {
    if ($message =~ /^4op(\s+($mask{chan}))?$/i) {
    if ($message =~ /^backlog(\s+(.*))?$/i) {
    if ($message =~ /^dumpvars$/i) {
    if ($message =~ /^kick(\s+(\S+)(\s+(\S+))?)?/) {
    if ($message =~ /^mode(\s+(.*))?$/) {
    if ($message =~ /^part(\s+(\S+))?$/i) {
    if ($message =~ /^(lobotomy|bequiet)$/i) {
    if ($message =~ /^(unlobotomy|benoisy)$/i) {
    if ($message =~ /^op(\s+(.*))?$/i) {
    if ($message =~ /^deop(\s+(.*))?$/i) {
    if ($message =~ s/^say\s+(\S+)\s+(.*)//) {
    if ($message =~ /^die$/) {
    if ($message =~ m|^s([/,#])(.+?)\1(.*?)\1;?\s*$|) {
    if ($message =~ /^jump(\s+(\S+))?$/i) {
    if ($message =~ /^reload$/i) {
    if ($message =~ /^reset$/i) {
    if ($message =~ /^rehash$/) {
    if ($message =~ /^chaninfo(\s+(.*))?$/) {
    if ($message =~ /^(chanset|\+chan)(\s+(.*?))?$/) {
    if ($message =~ /^(chanunset|\-chan)(\s+(.*))?$/) {
    if ($message =~ /^newpass(\s+(.*))?$/) {
    if ($message =~ /^chpass(\s+(.*))?$/) {
    if ($message =~ /^chattr(\s+(.*))?$/) {
    if ($message =~ /^chnick(\s+(.*))?$/) {
    if ($message =~ /^([-+])host(\s+(.*))?$/) {
    if ($message =~ /^([-+])ban(\s+(.*))?$/) {
    if ($message =~ /^whois(\s+(.*))?$/) {
    if ($message =~ /^bans(\s+(.*))?$/) {
    if ($message =~ /^banlist(\s+(.*))?$/) {
    if ($message =~ /^save$/) {
    $message =~ s/^addignore/+ignore/;
    $message =~ s/^(del|un)ignore/-ignore/;
    if ($message =~ /^(\+|\-)ignore(\s+(.*))?$/i) {
    if ($message =~ /^ignore(\s+(.*))?$/) {
    if ($message =~ /^(\+|\-|add|del)user(\s+(.*))?$/i) {
    if ($message =~ /^sched$/) {
